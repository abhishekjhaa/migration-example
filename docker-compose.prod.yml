version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: order-management-postgres
    environment:
      POSTGRES_DB: order_management
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  order-service:
    build:
      context: .
      dockerfile: ./services/order-service/Dockerfile
    container_name: order-service
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/order_management}
      PORT: 3001
      NODE_ENV: production
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3001/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  invoice-service:
    build:
      context: .
      dockerfile: ./services/invoice-service/Dockerfile
    container_name: invoice-service
    environment:
      DATABASE_URL: ${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/order_management}
      ORDER_SERVICE_URL: ${ORDER_SERVICE_URL:-http://order-service:3001}
      PORT: 3002
      NODE_ENV: production
    ports:
      - "3004:3002"
    depends_on:
      postgres:
        condition: service_healthy
      order-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3002/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
