// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String   @id @default(cuid())
  email     String   @unique
  firstName String
  lastName  String
  phone     String?
  address   String?
  city      String?
  state     String?
  zipCode   String?
  country   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders Order[]

  @@map("customers")
}

model Order {
  id         String      @id @default(cuid())
  customerId String
  status     OrderStatus @default(PENDING)
  total      Decimal     @db.Decimal(10, 2)
  subtotal   Decimal     @db.Decimal(10, 2)
  tax        Decimal     @db.Decimal(10, 2)
  discount   Decimal     @default(0) @db.Decimal(10, 2)
  notes      String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  customer Customer @relation(fields: [customerId], references: [id])
  items    OrderItem[]
  invoices Invoice[]

  @@map("orders")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal @db.Decimal(10, 2)
  total     Decimal @db.Decimal(10, 2)

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Invoice {
  id         String        @id @default(cuid())
  orderId    String
  customerId String
  number     String        @unique
  status     InvoiceStatus @default(DRAFT)
  subtotal   Decimal       @db.Decimal(10, 2)
  tax        Decimal       @db.Decimal(10, 2)
  discount   Decimal       @default(0) @db.Decimal(10, 2)
  total      Decimal       @db.Decimal(10, 2)
  dueDate    DateTime?
  paidAt     DateTime?
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  order Order @relation(fields: [orderId], references: [id])

  @@map("invoices")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}
