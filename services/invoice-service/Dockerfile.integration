# syntax=docker/dockerfile:1.4
FROM node:18-slim AS base

# Install required system dependencies for Prisma and health checks
RUN apt-get update && apt-get install -y \
    openssl \
    ca-certificates \
    curl \
    && rm -rf /var/lib/apt/lists/*

WORKDIR /app

# Copy package files first for better caching
COPY package*.json ./
COPY lib/package*.json ./lib/
COPY services/invoice-service/package*.json ./services/invoice-service/

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --include=dev

RUN --mount=type=cache,target=/root/.npm \
    cd lib && npm ci --include=dev

RUN --mount=type=cache,target=/root/.npm \
    cd services/invoice-service && npm ci --include=dev

# Build stage
FROM base AS builder

# Copy source code
COPY lib ./lib
COPY services/invoice-service ./services/invoice-service

# Build without cache mount to ensure proper file generation
RUN cd lib && npm run build

RUN cd services/invoice-service && npm run build

# Generate Prisma client
RUN cd lib && npx prisma generate

# Integration stage (includes dev dependencies for testing)
FROM base AS integration

# Copy built artifacts from builder stage
COPY --from=builder /app/lib/dist ./lib/dist
COPY --from=builder /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder /app/services/invoice-service/dist ./services/invoice-service/dist

# Copy Prisma schema for runtime
COPY lib/prisma ./lib/prisma

# Set working directory to invoice service
WORKDIR /app/services/invoice-service

# Expose port
EXPOSE 3002

# Create a startup script that runs migrations and starts the app
RUN echo '#!/bin/bash\n\
set -e\n\
echo "Running Prisma migrations..."\n\
cd /app/lib\n\
npx prisma migrate deploy\n\
echo "Starting application..."\n\
cd /app/services/invoice-service\n\
exec node dist/src/main.js' > /app/start.sh && chmod +x /app/start.sh

# Start the application
CMD ["/app/start.sh"]
